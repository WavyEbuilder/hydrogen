;; SPDX-FileCopyrightText: Â© 2025 Rahul Sandhu <nvraxn@gmail.com>
;; SPDX-License-Identifier: GPL-3.0-or-later

(userprefix user.id user.role)

(in sys

    (call .user.unpriv.roleallow.role (role)))

(in user

    (macro dontaudit_open_subj_fifo_files ((type ARG1))
           (dontaudit ARG1 subj (fifo_file (open))))

    (macro open_subj_fifo_files ((type ARG1))
           (allow ARG1 subj (fifo_file (open))))

    (blockinherit unpriv.template)
    (blockinherit unpriv.subj_template)

    ;; access to user agents is governed per-unpriv-role with rbac
    (call agent.client.type (subj))

    (call agent.getrlimit_all_processes (subj))
    (call agent.getsched_all_processes (subj))
    (call agent.ps_all_states (subj))
    (call agent.ptrace_all_processes (subj))
    (call agent.setrlimit_all_processes (subj))
    (call agent.setsched_all_processes (subj))
    (call agent.sigkill_all_processes (subj))
    (call agent.signal_all_processes (subj))
    (call agent.signull_all_processes (subj))
    (call agent.sigstop_all_processes (subj))

    (call home.manage_file_pattern.type (subj))
    (call home.map_file_files (subj))
    (call home.relabel_file_pattern.type (subj))

;    (call hugetlbfs.hugetlb_fs_type_transition_file (subj "*"))
;    (call hugetlbfs.manage_file_pattern.type (subj))
;    (call hugetlbfs.map_file_files (subj))
;    (call hugetlbfs.relabel_file_pattern.type (subj))

    (call mqueuefs.manage_file_pattern.type (subj))
    (call mqueuefs.map_file_files (subj))
    (call mqueuefs.mqueue_fs_type_transition_file (subj "*"))
    (call mqueuefs.relabel_file_pattern.type (subj))

    (call tmp.manage_file_pattern.type (subj))
    (call tmp.map_file_files (subj))
    (call tmp.relabel_file_pattern.type (subj))
    (call tmp.tmp_file_type_transition_file (subj dir "*"))
    (call tmp.tmp_file_type_transition_file (subj fifo_file "*"))
    (call tmp.tmp_file_type_transition_file (subj file "*"))
    (call tmp.tmp_file_type_transition_file (subj lnk_file "*"))
    (call tmp.tmp_file_type_transition_file (subj sock_file "*"))

    (call tmpfs.manage_file_pattern.type (subj))
    (call tmpfs.map_file_files (subj))
    (call tmpfs.relabel_file_pattern.type (subj))
    (call tmpfs.tmp_fs_type_transition_file (subj dir "*"))
    (call tmpfs.tmp_fs_type_transition_file (subj fifo_file "*"))
    (call tmpfs.tmp_fs_type_transition_file (subj file "*"))
    (call tmpfs.tmp_fs_type_transition_file (subj lnk_file "*"))
    (call tmpfs.tmp_fs_type_transition_file (subj sock_file "*"))

;    (call .dos.getattr_fs_pattern.type (subj))
;    (call .dos.manage_fs_pattern.type (subj))
;    (call .dos.map_fs_pattern.type (subj))

    (call .fuse.getattr_fs_pattern.type (subj))
    (call .fuse.manage_fs_pattern.type (subj))
    (call .fuse.map_fs_pattern.type (subj))

    (call .checkcontext_selinux_security (subj))

    (call .hugetlb.deletename_fs_dirs (subj))

;    (call .loginserialtermdev.all_type_change (subj serialtermdev))

    (call .mqueue.deletename_fs_dirs (subj))

    (call .selinux.default.read_file_pattern.type (subj))
    (call .selinux.file.read_file_pattern.type (subj))

;    (call .sys.termdev.readwriteinherited_all_chr_files (subj))

    (call .tmp.deletename_file_dirs (subj))

    (call .tmp.deletename_fs_dirs (subj))
;    (call .tmp.getattr_fs_pattern.type (subj))

    (optional unprivuser_hostname
              (call .hostname.role (role)))

    (optional unprivuser_lastlog
              (call .lastlog.role (role)))

    (optional unprivuser_usermailfile
              (call mail.spool.readwrite_file_files (subj))
              (call mail.spool.relabel_file_files (subj)))

    (optional unprivuser_userrunuserfile
              (call run.manage_file_pattern.type (subj))
              (call run.relabel_file_pattern.type (subj)))

    (block unpriv

      (macro dontaudit_create_all_keyrings ((type ARG1))
             (dontaudit ARG1 typeattr (key (create))))

      (macro role ((role ARG1))
             (roleattributeset roleattr ARG1))

      (macro type ((type ARG1))
             (typeattributeset typeattr ARG1))

      (roleattribute roleattr)
      (typeattribute typeattr)

      (blockinherit all_macro_template)

      (neverallow typeattr self (capability (all)))
      (neverallow typeattr self (capability2 (all)))

      (call common.type (typeattr))

      (call .ibac.subjchangetarget.type (typeattr))

      (call .obj.role (roleattr))

      (call .rbac.subjchangetarget.type (typeattr))

      (call .rbacsep.usefdsource.type (typeattr))

      (call .subj.useinteractivefd.type (typeattr))

;      (call .unixchkpwd.role (roleattr))
;      (call .unixupdate.role (roleattr))

      (block role_template

        (blockabstract role_template)

        (blockinherit .user.role_template)

        (call .user.unpriv.role (role)))

      (block roleallow

        (macro role ((role ARG1))
               (roleattributeset roleattr ARG1))

        (roleattribute roleattr)

        (roleallow roleattr unpriv.roleattr))

      (block subj_template

        (blockabstract subj_template)

        (blockinherit .user.subj_template)

        (call .user.unpriv.type (subj)))

      (block template

        (blockabstract template)

        (blockinherit .user.id_template)
        (blockinherit .user.unpriv.role_template)

        (call userrole.user (id))

        (call .user.role (role)))

      (block userrole

        (macro user ((user ARG1))
               (userattributeset userattr ARG1))

        (userattribute userattr)

        (userrole userattr unpriv.roleattr))))

(in user.agent

    (call termdev.readwriteinherited_all_chr_files (typeattr)))

(in user.common

    (call home.search_file_pattern.type (typeattr)))
